generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())

  accounts Account[]
  sessions Session[]

  recipes   Recipe[]   @relation("UserRecipes")
  favorites Favorite[]
  ratings   Rating[]
  comments  Comment[]
}

model Recipe {
  id           String             @id @default(cuid())
  title        String
  description  String
  instructions String?
  imageUrl     String
  prepTime     Int
  category     String
  author       User               @relation(fields: [authorId], references: [id], name: "UserRecipes", onDelete: Cascade)
  authorId     String
  createdAt    DateTime           @default(now())
  ingredients  RecipeIngredient[]
  favorites    Favorite[]
  ratings      Rating[]
  comments     Comment[]
}

model Ingredient {
  id      String             @id @default(cuid())
  name    String             @unique
  recipes RecipeIngredient[]
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Float?
  unit         String?

  @@unique([recipeId, ingredientId])
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model Rating {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  score     Int
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model Comment {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  recipe    Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
